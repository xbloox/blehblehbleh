-- imeowforfun

pcall(function()
    Workspace.FFA_MAP.INTERACTABLE_FILLBUILDING_DOORS:GetChildren()
end)
local Players = game:GetService('Players')
local MarketplaceService = game:GetService('MarketplaceService')
local GroupService = game:GetService('GroupService')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local Workspace = game:GetService('Workspace')
local HttpService = game:GetService('HttpService')
local RunService = game:GetService('RunService')
local Webhook = getgenv().UserSettings.Webhook

local function AntiAFK()
    local Player = game:GetService('Players').LocalPlayer
    local VirtualUser = game:GetService('VirtualUser')
    if getconnections then
        for _, conn in pairs(getconnections(Player.Idled)) do
            if conn.Disable then
                conn:Disable()
            elseif conn.Disconnect then
                conn:Disconnect()
            end
        end
    else
        Player.Idled:Connect(function()
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end)
    end
end

AntiAFK()

local function LowGfxMode()
    if not (getgenv().UserSettings and getgenv().UserSettings.Lowgfx) then
        return
    end
    local Lighting = game:GetService('Lighting')
    local RunService = game:GetService('RunService')
    local Terrain = workspace:FindFirstChildWhichIsA('Terrain')

    if Terrain then
        Terrain.WaterWaveSize = 0
        Terrain.WaterWaveSpeed = 0
        Terrain.WaterReflectance = 0
        Terrain.WaterTransparency = 1
    end

    Lighting.GlobalShadows = false
    Lighting.FogStart = 9e9
    Lighting.FogEnd = 9e9
    pcall(function()
        settings().Rendering.QualityLevel = 1
    end)

    for _, v in ipairs(game:GetDescendants()) do
        if v:IsA('BasePart') then
            v.CastShadow = false
            v.Material = Enum.Material.Plastic
            v.Reflectance = 0
        elseif v:IsA('Decal') then
            v.Transparency = 1
            v.Texture = ''
        elseif v:IsA('ParticleEmitter') or v:IsA('Trail') then
            v.Lifetime = NumberRange.new(0, 0)
            v.Rate = 0
            v.Enabled = false
        end
    end

    for _, v in ipairs(Lighting:GetDescendants()) do
        if v:IsA('PostEffect') then
            v.Enabled = false
        end
    end
    if Lighting:FindFirstChildOfClass('Atmosphere') then
        Lighting.Atmosphere.Density = 0
    end
    if Lighting:FindFirstChildOfClass('BloomEffect') then
        Lighting:FindFirstChildOfClass('BloomEffect').Enabled = false
    end
    if Lighting:FindFirstChildOfClass('DepthOfFieldEffect') then
        Lighting:FindFirstChildOfClass('DepthOfFieldEffect').Enabled = false
    end
    if Lighting:FindFirstChildOfClass('ColorCorrectionEffect') then
        Lighting:FindFirstChildOfClass('ColorCorrectionEffect').Enabled = false
    end
    if Lighting:FindFirstChildOfClass('SunRaysEffect') then
        Lighting:FindFirstChildOfClass('SunRaysEffect').Enabled = false
    end

    workspace.DescendantAdded:Connect(function(child)
        task.defer(function()
            if
                child:IsA('ForceField')
                or child:IsA('Sparkles')
                or child:IsA('Smoke')
                or child:IsA('Fire')
                or child:IsA('Beam')
            then
                child:Destroy()
            elseif child:IsA('BasePart') then
                child.CastShadow = false
            elseif child:IsA('ParticleEmitter') or child:IsA('Trail') then
                child.Lifetime = NumberRange.new(0, 0)
                child.Rate = 0
                child.Enabled = false
            end
        end)
    end)
end

LowGfxMode()

local function NoRenderMode()
    local norender = getgenv().UserSettings and getgenv().UserSettings.Norender
    game:GetService('RunService'):Set3dRenderingEnabled(not norender)
end

NoRenderMode()

local function SendWebhook(msg)
    local body = HttpService:JSONEncode({ content = msg })
    pcall(function()
        if request then
            request({
                Url = Webhook,
                Method = 'POST',
                Headers = { ['Content-Type'] = 'application/json' },
                Body = body,
            })
        elseif http and http.request then
            http.request({
                Url = Webhook,
                Method = 'POST',
                Headers = { ['Content-Type'] = 'application/json' },
                Body = body,
            })
        elseif httppost then
            httppost(Webhook, body, 'application/json')
        end
    end)
end

local GROUP1 = 339846382
local GROUP2 = 34199407

local PausedByGroup = false
local GroupIdleArgs = {
    322.345612,
    35.0833168,
    -604.33374,
    0.038368497,
    -9.53096517e-08,
    0.999263644,
    -8.00722244e-09,
    1,
    9.56873336e-08,
    -0.999263644,
    -1.16727055e-08,
    0.038368497,
}

spawn(function()
    while true do
        if PausedByGroup then
            task.wait(0.1)
            continue
        end

        for _, p in pairs(Players:GetPlayers()) do
            if p ~= Players.LocalPlayer then
                pcall(function()
                    if
                        (p:IsInGroup(GROUP1) and p:GetRankInGroup(GROUP1) > 0)
                        or (
                            p:IsInGroup(GROUP2)
                            and p:GetRankInGroup(GROUP2) > 0
                        )
                    then
                        PausedByGroup = true
                        SendWebhook(
                            '@everyone **AUTO FARM PAUSED** MOD JOINED - `'
                                .. p.Name
                                .. '`'
                        )
                        return
                    end
                end)
            end
        end
        task.wait(0.1)
    end
end)

local function check(Plr)
    if not Plr or not Plr.Parent or not Plr:IsA('Player') then
        return
    end

    pcall(function()
        local info = MarketplaceService:GetProductInfo(game.PlaceId).Creator
        if info.CreatorType == 'Group' then
            local gid = GroupService:GetGroupInfoAsync(info.CreatorTargetId).Id
            if Plr:IsInGroup(gid) and Plr:GetRankInGroup(gid) > 0 then
                game.StarterGui:SetCore('SendNotification', {
                    Title = 'Mod Detected ',
                    Text = Plr.Name .. ' joined!',
                    Duration = 3,
                })
            end
        end
        if Plr:IsInGroup(GROUP1) and Plr:GetRankInGroup(GROUP1) > 0 then
            game.StarterGui:SetCore('SendNotification', {
                Title = 'Mod Detected',
                Text = Plr.Name .. '  joined!',
                Duration = 3,
            })
            PausedByGroup = true
            SendWebhook(
                '@everyone **AUTO FARM PAUSED** MOD JOINED - `'
                    .. Plr.Name
                    .. '`'
            )
        end
        if Plr:IsInGroup(GROUP2) and Plr:GetRankInGroup(GROUP2) > 0 then
            game.StarterGui:SetCore('SendNotification', {
                Title = 'Mod Detected',
                Text = Plr.Name .. '  joined!',
                Duration = 3,
            })
            PausedByGroup = true
            SendWebhook(
                '@everyone **AUTO FARM PAUSED** - `' .. Plr.Name .. '` joined!'
            )
        end
    end)
end

Players.PlayerAdded:Connect(function(p)
    task.wait(0.01)
    check(p)
end)
for _, p in pairs(Players:GetPlayers()) do
    if p ~= Players.LocalPlayer then
        check(p)
    end
end

Players.PlayerRemoving:Connect(function(p)
    if PausedByGroup then
        task.wait(0.01)
        local stillPaused = false
        pcall(function()
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= Players.LocalPlayer then
                    if
                        (
                            player:IsInGroup(GROUP1)
                            and player:GetRankInGroup(GROUP1) > 0
                        )
                        or (
                            player:IsInGroup(GROUP2)
                            and player:GetRankInGroup(GROUP2) > 0
                        )
                    then
                        stillPaused = true
                        break
                    end
                end
            end
        end)
        if not stillPaused then
            PausedByGroup = false
            SendWebhook(
                '@everyone **AUTO FARM RESUMED** - No more Mods detected!'
            )
        end
    end
end)

local Player = Players.LocalPlayer
local Char = Player.Character or Player.CharacterAdded:Wait()
local MainEvent = ReplicatedStorage:WaitForChild('MainEvent')
local SafeMode = getgenv().UserSettings.SafeMode

local DistanceLimit = 15
local NotifyStep = 100
local BasketTagExact = '[Candy Basket]'
local IdleArgs = {
    -253.324051,
    -69.4246597,
    -507.357819,
    0.0264463127,
    8.99513566e-08,
    0.99965024,
    1.02786659e-08,
    1,
    -9.02547583e-08,
    -0.99965024,
    1.26619764e-08,
    0.0264463127,
}

local SafePositions = {
    Vector3.new(-342, 36, -253),
    Vector3.new(-445, 36, -202),
    Vector3.new(-64, 36, -617),
    Vector3.new(-484, 36, -109),
    Vector3.new(-208, 36, -723),
    Vector3.new(-820, 36, -492),
    Vector3.new(-626, 36, -285),
    Vector3.new(-611, 36, -616),
    Vector3.new(88, 37, -448),
    Vector3.new(-127, 37, -310),
    Vector3.new(-190, 37, -106),
    Vector3.new(-255, 36, -182),
    Vector3.new(-543, 36, -109),
}

local TeleOffset = Vector3.new(0, 0, 0)
local AfterPick = 0.3
local DoorStayTime = 1.0

local RunServiceConnection
local LastCandy = 0
local StartTime = tick()
local StoredBase = 0
local MaxCandy = 3000
local IsFarming = true

local function PathGet(root, path)
    local cur = root
    for _, n in ipairs(path) do
        if not cur then
            return nil
        end
        cur = cur:FindFirstChild(n)
    end
    return cur
end

local function TeleToCFrame(cf)
    if
        not Player.Character
        or not Player.Character:FindFirstChild('HumanoidRootPart')
    then
        return
    end
    Player.Character.HumanoidRootPart.CFrame = cf
    Player.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
end

local function TeleToSafeSpot()
    if #SafePositions == 0 then
        return
    end
    local pos = SafePositions[math.random(1, #SafePositions)]
    TeleToCFrame(CFrame.new(pos))
end

local function TryFireClickDetector(cd)
    if not cd then
        return false
    end
    pcall(function()
        fireclickdetector(cd)
    end)
    pcall(function()
        if cd.FireClick then
            cd:FireClick(Player)
        end
    end)
    pcall(function()
        if cd.MouseClick then
            cd.MouseClick:Fire(Player)
        end
    end)
    return true
end

local function DisableCollisions()
    if not Player.Character then
        return
    end
    for _, v in pairs(Player.Character:GetDescendants()) do
        if v:IsA('BasePart') and v.CanCollide then
            v.CanCollide = false
        end
    end
end

local function GetCandyAmount()
    local ok, val = pcall(function()
        local df = Player:WaitForChild('DataFolder', 1)
        if not df then
            return 0
        end
        local info = df:FindFirstChild('Information')
        if not info then
            return 0
        end
        local nv = info:FindFirstChild('CandyCollected')
        if not nv then
            return 0
        end
        return tonumber(nv.Value) or 0
    end)
    return ok and val or 0
end

local function IsPaused()
    if not Player.Character then
        return true
    end
    local be = PathGet(
        Workspace,
        { 'Players', 'Characters', Player.Name, 'BodyEffects' }
    )
    if be then
        local ko = be:FindFirstChild('K.O')
        local dead = be:FindFirstChild('Dead')
        return (ko and ko.Value == true) or (dead and dead.Value == true)
    end
    return false
end

local function HasBasket()
    local bp = Player:FindFirstChild('Backpack')
    local ch = Player.Character
    if bp then
        for _, v in pairs(bp:GetChildren()) do
            if v.Name == 'Candy Basket' or v.Name:find('Basket') then
                return true
            end
        end
    end
    if ch then
        for _, v in pairs(ch:GetChildren()) do
            if v.Name == 'Candy Basket' or v.Name:find('Basket') then
                return true
            end
        end
    end
    return false
end

local function FindBasket()
    local shop = PathGet(Workspace, { 'FFA_MAP', 'Shop' })
    if not shop then
        for _, d in pairs(Workspace:GetDescendants()) do
            if d.Name == 'Shop' and d.Parent and d.Parent.Name == 'FFA_MAP' then
                shop = d
                break
            end
        end
    end
    if not shop then
        return nil
    end
    for _, m in pairs(shop:GetDescendants()) do
        if m:IsA('Model') then
            for _, sv in pairs(m:GetChildren()) do
                if sv:IsA('StringValue') and sv.Value == BasketTagExact then
                    return m
                end
            end
        end
    end
    return nil
end

local function TryGrabBasket()
    if HasBasket() then
        return true
    end
    local m = FindBasket()
    if not m then
        return false
    end
    local target = m.PrimaryPart and m.PrimaryPart.Position
        or m:FindFirstChildWhichIsA('BasePart')
            and m:FindFirstChildWhichIsA('BasePart').Position
    if not target then
        return false
    end
    TeleToCFrame(CFrame.new(target))
    task.wait(AfterPick)
    for _, d in pairs(m:GetDescendants()) do
        if d:IsA('ClickDetector') then
            TryFireClickDetector(d)
        end
    end
    task.wait(AfterPick)
    return HasBasket()
end

local function GetAvailableDoors()
    local root =
        PathGet(Workspace, { 'FFA_MAP', 'INTERACTABLE_FILLBUILDING_DOORS' })
    if not root then
        return {}
    end

    local list = {}
    for _, m in pairs(root:GetChildren()) do
        if not m:IsA('Model') then
            continue
        end

        local closed = m:FindFirstChild('CLOSED')
        local open = m:FindFirstChild('OPEN')
        local debounce = m:FindFirstChild('DEBOUNCE')
        local playerBlock = m:FindFirstChild('PlayerNameCanNotInteract')

        if
            not (
                closed
                and open
                and closed:FindFirstChild('DOOR')
                and open:FindFirstChild('DOOR')
            )
        then
            continue
        end

        if debounce and debounce.Value == true then
            continue
        end

        if playerBlock and playerBlock.Value ~= '' then
            local ok, blocked =
                pcall(HttpService.JSONDecode, HttpService, playerBlock.Value)
            if ok and table.find(blocked, Player.Name) then
                continue
            end
        end

        local stars = closed.DOOR:FindFirstChild('Stars')
        if stars and stars.Enabled == true then
            table.insert(list, m)
        end
    end
    return list
end

local function GetBestSafeModeDoor(doors)
    if not SafeMode then
        return nil
    end
    local bestDoor, bestScore = nil, math.huge

    for _, door in pairs(doors) do
        local doorPos = door.OPEN.DOOR.Position
        local closestSafeDist = math.huge

        for _, safePos in pairs(SafePositions) do
            local dist = (
                Vector3.new(safePos.X, safePos.Y, safePos.Z) - doorPos
            ).Magnitude
            closestSafeDist = math.min(closestSafeDist, dist)
        end

        if closestSafeDist < bestScore then
            bestScore = closestSafeDist
            bestDoor = { Model = door, Pos = doorPos, Score = closestSafeDist }
        end
    end

    return bestDoor
end

local function GetNearestDoor(doors)
    if
        not Player.Character
        or not Player.Character:FindFirstChild('HumanoidRootPart')
    then
        return nil
    end

    local best, bestDist = nil, math.huge
    for _, m in pairs(doors) do
        local open = m:FindFirstChild('OPEN')
        if open and open:FindFirstChild('DOOR') then
            local pos = open.DOOR.Position
            local dist = (Player.Character.HumanoidRootPart.Position - pos).Magnitude
            if dist < bestDist then
                bestDist = dist
                best = { Model = m, Pos = pos, Dist = dist }
            end
        end
    end
    return best
end

local function TreatDoor(d)
    if
        not d
        or not d.Model
        or not Player.Character
        or not Player.Character:FindFirstChild('HumanoidRootPart')
    then
        return false
    end

    if SafeMode then
        TeleToSafeSpot()
    else
        TeleToCFrame(CFrame.new(d.Pos))
    end

    local timeout = tick() + 2
    repeat
        task.wait(0.01)
    until (Player.Character.HumanoidRootPart.Position - d.Pos).Magnitude
            <= DistanceLimit
        or tick() > timeout

    if
        (Player.Character.HumanoidRootPart.Position - d.Pos).Magnitude
        > DistanceLimit
    then
        return false
    end

    for i = 1, 3 do
        MainEvent:FireServer('TRICK_OR_TREAT', d.Model)
        task.wait(0.03)
    end

    task.wait(DoorStayTime)

    if SafeMode then
        TeleToSafeSpot()
    end

    return true
end

local function WaitForTools()
    local attempts = 0
    while attempts < 20 do
        if Player.Backpack and #Player.Backpack:GetChildren() > 0 then
            return true
        end
        attempts = attempts + 1
        task.wait(0.1)
    end
    return false
end

local function OnChar(c)
    Char = c
    local hrp = c:WaitForChild('HumanoidRootPart', 5)
    if not hrp then
        return
    end

    task.wait(2)
    DisableCollisions()
    WaitForTools()
    pcall(TryGrabBasket)
end

if Player.Character then
    OnChar(Player.Character)
end
Player.CharacterAdded:Connect(OnChar)

local initialCandy = GetCandyAmount()
SendWebhook('**Auto TrickOrTreat STARTED** - Current candy: ' .. initialCandy)
LastCandy = initialCandy
StoredBase = initialCandy
StartTime = tick()

local hasTeleportedToGroupIdle = false
spawn(function()
    while true do
        if
            PausedByGroup
            and Player.Character
            and not hasTeleportedToGroupIdle
        then
            local cf = CFrame.new(
                GroupIdleArgs[1],
                GroupIdleArgs[2],
                GroupIdleArgs[3],
                GroupIdleArgs[4],
                GroupIdleArgs[5],
                GroupIdleArgs[6],
                GroupIdleArgs[7],
                GroupIdleArgs[8],
                GroupIdleArgs[9],
                GroupIdleArgs[10],
                GroupIdleArgs[11],
                GroupIdleArgs[12]
            )
            TeleToCFrame(cf)
            hasTeleportedToGroupIdle = true
        elseif not PausedByGroup then
            hasTeleportedToGroupIdle = false
        end
        task.wait(0.5)
    end
end)

RunServiceConnection = RunService.Heartbeat:Connect(function()
    if not IsFarming then
        return
    end
    if GetCandyAmount() >= MaxCandy then
        IsFarming = false
        SendWebhook('**FARMING COMPLETE!** Reached 3000 candies!')
        RunServiceConnection:Disconnect()
        return
    end

    if
        not Player.Character
        or not Player.Character:FindFirstChild('HumanoidRootPart')
        or IsPaused()
    then
        return
    end

    if PausedByGroup then
        return
    end

    DisableCollisions()

    if not HasBasket() then
        TryGrabBasket()
        return
    end

    local doors = GetAvailableDoors()
    if #doors == 0 then
        if SafeMode then
            TeleToSafeSpot()
        else
            local cf = CFrame.new(
                IdleArgs[1],
                IdleArgs[2],
                IdleArgs[3],
                IdleArgs[4],
                IdleArgs[5],
                IdleArgs[6],
                IdleArgs[7],
                IdleArgs[8],
                IdleArgs[9],
                IdleArgs[10],
                IdleArgs[11],
                IdleArgs[12]
            )
            TeleToCFrame(cf)
        end
        return
    end

    local targetDoor
    if SafeMode then
        targetDoor = GetBestSafeModeDoor(doors)
    else
        targetDoor = GetNearestDoor(doors)
    end

    if targetDoor then
        TreatDoor(targetDoor)
        task.wait(0.1)
    end

    local currentCandy = GetCandyAmount()
    if currentCandy >= MaxCandy then
        IsFarming = false
        SendWebhook('**FARMING COMPLETE!** Reached 3000 candies!')
        RunServiceConnection:Disconnect()
        return
    end

    if currentCandy - StoredBase >= NotifyStep then
        local timeElapsed = tick() - StartTime
        local candyPerHour =
            math.floor(((currentCandy - initialCandy) / timeElapsed) * 3600)
        local rewardMsg = ''
        if math.floor(currentCandy / 500) > math.floor(StoredBase / 500) then
            rewardMsg = '\n**REWARD UNLOCKED!**'
        end

        SendWebhook(
            string.format(
                '**CANDY UPDATE** #%d\n'
                    .. 'Current: %d | Gained: +%d\n'
                    .. 'Rate: %d/hr | Progress: %.1f%%\n'
                    .. 'Time: %.1f min%s',
                math.floor(currentCandy / 500) + 1,
                currentCandy,
                currentCandy - StoredBase,
                candyPerHour,
                (currentCandy / MaxCandy) * 100,
                timeElapsed / 60,
                rewardMsg
            )
        )
        StoredBase = currentCandy
    end
end)

spawn(function()
    while true do
        if Player.Character and Player.Character:FindFirstChild('Humanoid') then
            pcall(function()
                Player.Character.Humanoid:UnequipTools()
            end)
        end
        task.wait(0.01)
    end
end)
